import matplotlib.pyplot as plt
import numpy as np
import math


def move(x, dt):
    v = 4
    x[0] += v * math.cos(x[2]) * dt
    x[1] += v * math.sin(x[2]) * dt
    return x


def robot_draw(x, y, orientation):
    robot_length = 5
    robot_width = 5
    outline = np.array([[-robot_length / 2, robot_length / 2,
                         robot_length / 2, -robot_length / 2,
                         -robot_length / 2],
                        [robot_width / 2, robot_width / 2,
                         - robot_width / 2, -robot_width / 2,
                         robot_width / 2]])
    rotation = np.array([[math.cos(orientation), math.sin(orientation)],
                         [-math.sin(orientation), math.cos(orientation)]])
    outline = (outline.T.dot(rotation)).T

    # ":" itera su tutti gli elementi della riga
    outline[0, :] += x
    outline[1, :] += y
    plt.plot(np.array(outline[0, :]).flatten(),
             np.array(outline[1, :]).flatten())


def map_draw():
    ox, oy = [], []
    map_lenght = 100
    map_width = 100
    # Perimetro
    for i in range(0, map_lenght):
        ox.append(i)
        oy.append(0)
    for i in range(0, map_width):
        ox.append(map_width)
        oy.append(i)
    for i in range(0, map_lenght):
        ox.append(i)
        oy.append(map_lenght)
    for i in range(0, map_width):
        ox.append(0)
        oy.append(i)

    # Pareti Interne
    for i in range(map_width - 20, map_width):
        ox.append(20.0)
        oy.append(i)
    for i in range(map_width - 40, map_width):
        ox.append(60.0)
        oy.append(i)
    for i in range(20, 40):
        ox.append(i)
        oy.append(80.0)
    for i in range(0, 40):
        ox.append(40.0)
        oy.append(40.0 - i)

    plt.plot(ox, oy, ".k")
    plt.grid(True)
    plt.axis("equal")


def main():
    x = np.array([5.0, 5.0, math.pi / 8.0])
    print(x)

"""
class MapTiles(pg.sprite.Sprite):
    def __init__(self, x, y, width, height, color):
        super().__init__()
        self.image = pg.Surface((width, height))
        self.rect = self.image.get_rect()
        self.color = color
        self.x = x
        self.y = y
        self.found = False


def map_create2(offset):
    surface = pg.Surface([window.get_width(), window.get_height()])
    group = pg.sprite.Group()
    for i in range(0, window.get_width()):
        for j in range(0, window.get_height()):
            if (i + j) % 2 == 0:
                r = MapTiles(i * GRIDSIZE, j * GRIDSIZE, GRIDSIZE, GRIDSIZE, GREY)
            else:
                r = MapTiles(i * GRIDSIZE, j * GRIDSIZE, GRIDSIZE, GRIDSIZE, LIGHTGREY)
            group.add(r)

    walls = [pg.Rect(0, 0, offset, window.get_height()),  # Lato Sinisto
             pg.Rect(window.get_width() - offset, 0, offset, window.get_height()),  # Lato Destro
             pg.Rect(0, 0, window.get_width(), offset),  # Lato Superiore
             pg.Rect(0, window.get_height() - offset, window.get_width(), offset),  # Lato Inferiore
             pg.Rect(200, window.get_height() - offset - 200, offset, 200),  # Ostacolo 1
             pg.Rect(400, offset, offset, 300),  # Ostacolo 2
             ]
    for w in walls:
        pg.draw.rect(surface, BLACK, w)
    return surface, walls, group
"""

if __name__ == '__main__':
    main()
